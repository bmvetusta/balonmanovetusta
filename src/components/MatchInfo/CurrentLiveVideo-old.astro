---
import { PRIMERA_TEAM_ID, YOUTUBE_CHANNEL } from 'astro:env/server';
import { isYoutubeChannelLive } from 'src/services/is-yotube-channel-live';
import { getYoutubeVideoIdFromURL } from 'src/services/get-youtube-video-id-from-url';
import veryFallbackCalendarData from 'src/content/calendar/data.json' with { type: 'json' };
import type { responseCalendarSchema } from 'src/schema/calendar/response';
import { rfebmApiGetCalendar } from 'src/services/rfebm-api/get-calendar';
import { PRIMERA_GROUP_ID } from 'astro:env/server';
import SocialNetwork from '../SocialNetwork.astro';
import SafariYoutubeVideo from '../youtube/SafariYoutubeVideo.astro';
import YoutubeVideo from '../youtube/YoutubeVideo.astro';

async function getCalendarData() {
  const data = await rfebmApiGetCalendar(PRIMERA_GROUP_ID);

  if (!data) {
    return (veryFallbackCalendarData ?? []) as typeof responseCalendarSchema._output;
  }

  return data;
}

const calendar = await getCalendarData();

const today = new Date();
const currentTime = today.toLocaleTimeString('es-ES', {
  timeZone: 'Europe/Madrid',
  hour12: false,
  hour: '2-digit',
  minute: '2-digit',
});
export const partial = true;
let youtubeVideoId, match, isLive;

function isProbablyEndMatch(now: string, startTime?: string | null) {
  if (!startTime) {
    return true; // Means ended
  }

  const [startHour, startMinute] = startTime.split(':').map(Number);
  const [currentHour, currentMinute] = now.split(':').map(Number);

  const probablyEndHour = startHour + 2;

  return (
    currentHour > probablyEndHour ||
    (currentHour === probablyEndHour && currentMinute >= startMinute)
  );
}

const isChannelLive = await isYoutubeChannelLive(YOUTUBE_CHANNEL);

if (isChannelLive) {
  youtubeVideoId = isChannelLive === true ? YOUTUBE_CHANNEL : isChannelLive;
}

if (!isChannelLive) {
  // const [, monthString, , , currentHourString] = today
  const [dayString, monthString, yearString, _, currentHourString] = today
    .toLocaleTimeString('es-ES', {
      timeZone: 'Europe/Madrid',
      hour12: false,
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
    })
    .split(/[, \/:]/);
  const sqlCurrentDateString = `${yearString}-${monthString}-${dayString}`;
  // const day = +dayString;
  const month = +monthString;
  const currentHour = +currentHourString;

  // Match Schedule rules page 103: https://www.rfebm.com/sites/default/files/documentos/04_1a_masculina_2425.pdf

  if (month <= 6 || month >= 8) {
    // Only in July there are no matchs for sure
    if (currentHour >= 10 && currentHour <= 23) {
      match = calendar?.find(
        (match) =>
          match.date &&
          match.date === sqlCurrentDateString &&
          !isProbablyEndMatch(currentTime, match.time) &&
          (match.localTeam.id === PRIMERA_TEAM_ID || match.visitorTeam.id === PRIMERA_TEAM_ID)
      );

      if (match && match.urlStreaming) {
        // GAME DAY
        isLive = await isYoutubeChannelLive(match.urlStreaming);

        if (isLive && isLive !== true) {
          youtubeVideoId = isLive;
        }

        if (!isLive) {
          youtubeVideoId = getYoutubeVideoIdFromURL(match.urlStreaming);
        }
      }
    }
  }
}

if (!youtubeVideoId && !match) {
  return '';
}

const ua = Astro.request.headers.get('User-Agent');
const isSafari = ua?.includes('AppleWebKit') && !ua?.includes('Chrome');

const activeMatch = match && ['PENDING', 'PLAYING'].includes(match.status);
const text =
  match && activeMatch && !isLive
    ? `A partir de las ${match.time}`
    : '¡Estamos jugando! Puedes ver el partido en directo';

const title =
  match && !isLive ? `Hoy se juega a las ${match.time}` : `¡Estamos jugango en directo!`;
---

{
  activeMatch ? (
    <section id='match'>
      <header>
        <h1>GAMEDAY</h1>
      </header>
      <main>
        <p>
          {match!.localTeam.name} - {match!.visitorTeam.name}
        </p>
        {match!.urlStreaming ? (
          <SocialNetwork
            icon='yt'
            href={match!.urlStreaming}
            text={text}
            alt='Logo de Youtube: partido en directo'
            title={title}
            style='--link-color: var(--live-color-hex, red); --link-alpha-color: 0.9;'
          />
        ) : (
          <p>No hay enlace para la retransmisión.</p>
        )}
      </main>
    </section>
  ) : (
    ''
  )
}

{
  isLive && youtubeVideoId ? (
    <>
      <article class='live'>
        <header>
          <p>Estamos en directo</p>
          <button>X</button>
        </header>

        <main>
          {isSafari ? (
            <SafariYoutubeVideo videoId={youtubeVideoId} />
          ) : (
            <YoutubeVideo videoId={youtubeVideoId} />
          )}
        </main>
      </article>
    </>
  ) : (
    ''
  )
}

<style>
  section#match h1 {
    color: var(--live-color-hex, red);
    font-size: 2.5rem;
    text-align: center;
  }

  section#match main {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: 1rem;
  }

  section#match main p {
    font-size: 1.5rem;
  }

  section#match main a {
    width: fit-content;
    font-size: 2rem;
    text-decoration: none;
  }

  article {
    border-radius: 1rem;
    padding: 1rem;
    overflow: hidden;
    border: 5pt solid var(--live-color-hex, tomato);
    position: absolute;
    z-index: 5;
    bottom: 0;
    right: 0;
    max-width: 280px;
    background: var(--background-color, canvas);
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    justify-content: center;
  }

  article > main {
    object-fit: contain;
    max-width: 100%;
    max-height: 100%;
    aspect-ratio: 16 / 9;
  }

  article > header {
    position: relative;
    top: 0;
    right: 2rem;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    gap: 1rem;
    margin-left: 2rem;
    z-index: 1;
    width: 100%;
    height: 2rem;
    font-size: 1.25rem;
    color: var(--live-color-hex, tomato);
    font-weight: 900;
    text-transform: uppercase;
  }
  article > header button {
    padding: 0.5rem;
    width: 2rem;
    height: 2rem;
    font-size: 0.8rem;
    line-height: 100%;
    border-radius: 50%;
    background-color: #666;
    color: #000;
    border: none;
    position: relative;
    top: -0.5rem;
  }
</style>

<script type='module' is:inline>
  const live = document.querySelector('article.live');
  const btn = document.querySelector('article.live button');
  btn.addEventListener('click', () => {
    live.style.display = 'none';
  });
</script>
